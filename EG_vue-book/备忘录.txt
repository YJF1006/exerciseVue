#基本已经完成（剩下收藏功能没有实现）
## 项目用到less
```
    npm install less less-loader axios vuex bootstrap
```
# 初始化一个项目
- 1. 输入  vue init webpack '项目名字'
- 2. 一直回车（或者可以自己修改），从Set up unit tests接下来的两个选择no    


# 修改端口号是在  config文件夹里面有个index.js文件，修改里面的 port: 8080, 即可

# 删除部分不用的文件
  1. helloWord.vue文件
  2. router文件里面index.js里面的HelloWord的引入，以及routers数组里面的对象
  3. App.vue 里面的模板里面的东西，已经app的样式

# 新建文件夹和文件
- mock 提供数据的
- src里面的(前台代码)
-    api 所有的接口(axios发送请求，类似于ajax)
-    base 基本组件
-    components 页面级组件


# iconfont 字体图片
- 加入购物车之后新建一个项目名称，然后通过在线链接引入到index.html里面

# 新建需要的页面级组件，然后把它们引入到router里面,最后配上路由


## 安装轮播图插件
```
        npm install vue-awesome-swiper --save
```

## 热门图书的功能
 - 先写服务端，确保数据能正常返回(server.js   book.json)
 - 增加api方法，实现调取数据的功能
 - 在哪个组件中应用这个appi如果是一个基础组件，需要用这些数据
在使用这个组件的父级中调用这个方法，将数据传递给基础组件
- 写一个基础组件  
    - 1. 创建一个.vue文件
    - 2. 在需要使用这个组件的父级引种这个组件
    - 3. 在组件中注册
    - 4. 以标签的形式引入

## list页面级组件
- 对数的增删改产 采用restful架构风格

## 实现页面缓存(以及动画效果)
-路由元信息$route.meta.keepAlive

- 在路由上增加 meta:{keepAlive:true}  //说明这个路由的数据需要缓存
- 到时候调用的时候用 
```  在App.vue里面
<!-- 需要缓存的走这  -->
    <keep-alive>
        <router-view v-if='$route.meta.keepAlive'></router-view>    
    </keep-alive>
<!-- 正常的访问 不需要缓存的走这 -->
    <router-view v-if='!$route.meta.keepAlive'></router-view>   
``` 


## 下拉加载 /page
- 默认一次给5条，前端告诉后台现在需要从第几条开始给
- /page?offset=5
- 后台还要告诉前端是否有更多的数据   hasMore:false(代表没有数据了)

##  滚动
 - scrollTop + 元素.clientHeight= 元素.scrollHeight   (卷掉的 + 元素的可视区域 = 元素的内容高度)  一般怕小数影响，会给等式左边多+一个常数

## 图片懒加载
- 监听图片的onload事件
- github上面的插件  vue-lazyload
- npm 下载插件  import 引入插件(Vue.use())   在需要懒加载的图片上引用  v-lazy (以前是src=  现在是v-lzay)


## 用在项目优化  coding split  (代码分割)   
- 在路由中不需要一次全部引入所有的页面级组件，这样会把所有的打包在一起，一刷新会全部加载出来（要是项目大了，会加载时间过长）
- 在router index.js里面把每个路径的 component写成函数去动态，调用才会加载执行
``` 
  component:()=>import('组件的位置')
```
- 这个需要语法是高级语法需要 syntax-dynamic-import 插件，但现在用的脚手架，自带这个插件所以不用担心
  
-最后上线的代码跟src无关  只跟最后打包出来的dist有关

#打包之后的工作(开发的时候要跨域，但是上线之后就是同域了)
## 在服务里面写一个静态的

#打包之前要整理的东西

## 1.删除服务里面的跨域内容，因为现在是同域了
```   //跨域头
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild');
    res.setHeader('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS');
    if (req.method == 'OPTIONS') {
      return res.end(); /*让options请求快速返回*/
    }
```
##2.删除掉 api里面index.js 里面的拦截器
- axios.defaults.baseURL= 'http://localhost:1006';   //增加默认的请求路径(axios.defaults.baseURL)

## 3.修改router 里面index.js 模式
```
    mode:'history',  
```
-前后端分离，后端只负责提供接口供前端调用，像跳转都是前端自己处理的
  1. hash模式 #   开发时使用hash,    不支持seo
  2. h5的history.pushState  上线的时候用这个(因为hash不会被搜索引擎搜索到的)
    history.pushState('','','/路径')    页面不会刷新    回车会真实的去访问

#运行（本文件里面的mork是已经打包好了的）
- 直接node运行mork里面的服务文件，就可以在响应的端口看到项目了


#备注
- npm run dev   是自己测试用的  ，不用在本地生成一个dist文件，
- npm run buid  是打包用的

-真正的上线
    把mock文件夹放到自己的服务器(阿里云服务器等等)上就行了  ，就算正式的上线了
