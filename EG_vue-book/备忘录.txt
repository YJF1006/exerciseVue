## 项目用到less
```
    npm install less less-loader axios vuex bootstrap
```
# 初始化一个项目
- 1. 输入  vue init webpack '项目名字'
- 2. 一直回车（或者可以自己修改），从Set up unit tests接下来的两个选择no    


# 修改端口号是在  config文件夹里面有个index.js文件，修改里面的 port: 8080, 即可

# 删除部分不用的文件
  1. helloWord.vue文件
  2. router文件里面index.js里面的HelloWord的引入，以及routers数组里面的对象
  3. App.vue 里面的模板里面的东西，已经app的样式

# 新建文件夹和文件
- mock 提供数据的
- src里面的(前台代码)
-    api 所有的接口(axios发送请求，类似于ajax)
-    base 基本组件
-    components 页面级组件


# iconfont 字体图片
- 加入购物车之后新建一个项目名称，然后通过在线链接引入到index.html里面

# 新建需要的页面级组件，然后把它们引入到router里面,最后配上路由


## 安装轮播图插件
```
        npm install vue-awesome-swiper --save
```

## 热门图书的功能
 - 先写服务端，确保数据能正常返回(server.js   book.json)
 - 增加api方法，实现调取数据的功能
 - 在哪个组件中应用这个appi如果是一个基础组件，需要用这些数据
在使用这个组件的父级中调用这个方法，将数据传递给基础组件
- 写一个基础组件  
    - 1. 创建一个.vue文件
    - 2. 在需要使用这个组件的父级引种这个组件
    - 3. 在组件中注册
    - 4. 以标签的形式引入

## list页面级组件
- 对数的增删改产 采用restful架构风格

## 实现页面缓存(以及动画效果)
-路由元信息$route.meta.keepAlive

- 在路由上增加 meta:{keepAlive:true}  //说明这个路由的数据需要缓存
- 到时候调用的时候用 
```  在App.vue里面
<!-- 需要缓存的走这  -->
    <keep-alive>
        <router-view v-if='$route.meta.keepAlive'></router-view>    
    </keep-alive>
<!-- 正常的访问 不需要缓存的走这 -->
    <router-view v-if='!$route.meta.keepAlive'></router-view>   
``` 


## 下拉加载 /page
- 默认一次给5条，前端告诉后台现在需要从第几条开始给
- /page?offset=5
- 后台还要告诉前端是否有更多的数据   hasMore:false(代表没有数据了)

##  滚动
 - scrollTop + 元素.clientHeight= 元素.scrollHeight   (卷掉的 + 元素的可视区域 = 元素的内容高度)  一般怕小数影响，会给等式左边多+一个常数